
Although SceneGraphBuilder provides all of the builder nodes you will use when creating your GroovyFX graphics and 
UIs, you will rarely use it directly.  This is because you will typically begin your applications by calling the 
static _start_ method of the GroovyFX class as shown here.

{code}
import static groovyx.javafx.GroovyFX.start

start {
    stage(title: 'GroovyFX', show: true) {
        scene {
            rectangle(width: 300, height: 100, fill: GREEN)
        }
    }
}
{code}

The GroovyFX.start method takes a closure as its only parameter and, behind the scenes, it initiates JavaFX's startup
sequence.  The _start_ method also ensures that the closure you pass will be executed at the appropriate time during
the JavaFX startup sequence.  Just before your closure is executed, the _start_ method creates a new SceneGraphBuilder 
object and sets it as the closure's delegate.  This is the reason that you can call SceneGraphBuilder methods like 
_stage_, _scene_, and _rectangle_ within your closure.  Those calls will be automatically forwarded on to the closure's 
delegate SceneGraphBuilder object when they are not found within the closure's current scope.

Calling the GroovyFX.start method is the missing piece of the puzzle we referred to in the previous section when we
first presented this code.

The following sections describe some of the generalized behavior supported in the SceneGraphBuilder on all
nodes and attributes defined in the User Guide.

