h4. Using GroovyFX from Maven Central

Having GroovyFX in Maven Central (thanks to Sonatype's OSS hosting!) makes it simple to use GroovyFX in 
everything from simple test scripts to larger projects.  The Maven coordinates are as follows

* _groupId_: org.codehaus.groovyfx
* _artifactId_: groovyfx
* _version_: 0.2

GroovyFX is simple to inlude in Groovy scripts thanks to Groovy's Grab annotation, a part of the Grape 
system.  Just include the following line at the top of your script

{code}
@Grab('org.codehaus.groovyfx:groovyfx:0.2')
{code}

h4. Creating a GroovyFX-Based Project with Gradle

It is also simple to set up your own GroovyFX-based project using Gradle as the build system.  This sample
build.gradle script will get you started.

{code}
apply plugin:'groovy'

ext.javafxHome = System.env['JAVAFX_HOME']

repositories { mavenCentral() }

dependencies {
    groovy  'org.codehaus.groovy:groovy-all:1.8.6'
    compile 'org.codehaus.groovyfx:groovyfx:0.2'
    compile files("${javafxHome}/rt/lib/jfxrt.jar")
}

task run(type: JavaExec) {
    main = 'MyMain'
    classpath sourceSets.main.runtimeClasspath
}

task makeDirs(description: 'make all dirs for project setup') << {
    def sources = [sourceSets.main, sourceSets.test]
    sources*.allSource*.srcDirs.flatten().each { File srcDir ->
        println "making $srcDir"
        srcDir.mkdirs()
    } 
}

task wrap(type:Wrapper, description: 'create a gradlew') {
    gradleVersion = '1.0-rc-3'
}
{code}

Just create a new directory for your project and place this build.gradle file in it.  Then simply call

{code}
gradle makeDirs
{code}

to set up the rest of your project's directory structure.  You will automatically have a dependency on both
Groovy and GroovyFX.