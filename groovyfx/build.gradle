apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

// Set Maven coordinates
group = 'org.codehaus.groovyfx'
archivesBaseName = "groovyfx"
version = '0.1'

// Read environment and set properties
javafxHome = System.env['JAVAFX_HOME']
isRelease = !version.endsWith('SNAPSHOT')

repositories {
    mavenCentral()
}

dependencies {
    groovy 'org.codehaus.groovy:groovy-all:1.8.0'
    compile 'asm:asm:3.2'
    compile files("${javafxHome}/rt/lib/jfxrt.jar")
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives groovydocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

// Define a source set for the non-standard src/demo directory
sourceSets {
    demo {
        compileClasspath += sourceSets.main.output + configurations.compile
        runtimeClasspath += sourceSets.main.output
        groovy {
            srcDir = 'src/demo/groovy'
        }
        resources {
            srcDir = 'src/demo/resources'
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
            name 'GroovyFX'
            url 'http://groovyfx.org'
            description 'Groovy bindings for JavaFX 2.x'
            packaging 'jar'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'scm:git@github.com:groovyfx-project/groovyfx.git'
                connection 'scm:git@github.com:groovyfx-project/groovyfx.git'
                developerConnection 'scm:git@github.com:groovyfx-project/groovyfx.git'
            }
            developers {
                developer { name 'Jim Clarke' }
                developer { name 'Dean Iverson' }
            }
        }
    }
}

// Add a dynamic task to run each of the demos in src/demo/groovy
new File('src/demo/groovy').eachFileMatch(~/.*Demo.groovy/) { file ->
    def taskName = file.name - '.groovy'
    task "$taskName"(type: JavaExec) {
        group = "Demo"
        description = "Run the $taskName program"
        main = taskName
        classpath sourceSets.main.runtimeClasspath, sourceSets.demo.runtimeClasspath
    }
}

